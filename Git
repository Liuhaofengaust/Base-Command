#Git常用终端命令

git version        //获取版本信息

git log            //查看提交日志
git log --all --decorate --oneline --graph //单行显示日志
git diff           //查看本地文件改动（一旦add后就无法使用）

＃本地初始化仓库＃
cat ~/.gitconfig   //获取初始化信息
git status         //获取git仓库状态
git config -- global user.name " "  //初始化化账号
git config -- global user.email " " //初始化化邮箱
git init           //初始化本地仓库　(.git文件 )
git add            //提交到暂存区  git add -A(全部加入)
git commit -m"描述"//提交到本地仓库



＃版本控制＃
git reset --hard commit_id   //回退到指定ｉｄ版本(注　HEAD表示当前版本，HEAD^^表示退两个版本，HEAD~100)
git reflog       　　　　　　//查看历史指令，可通过此查看版本id

git checkout -- file         //撤销修改　到最近一次的add/commit时；此操作还可以恢复仓库中误删的工作区文件
git rm --cached    　　　　　//从暂存区拉回工作区
git rm            　　　　　//从git中删除

//首先你的指定提交到那个远程仓库。有两个方法：（远程仓库可以连接多个本地仓库,但一个本地仓库只能连接一个远程仓库）
1、去github上创建一个新仓库，将仓库地址信息复制下来
也就是这个(git remote add origin http://github.com/用户名/仓库名.git),将这个作为连接远程仓库的的URL

2、创建一个文件夹，然后克隆下来一个远程仓库，直接变成了一个本地仓库

git push (-u)(origin)(branch)   //推到远程仓库 (-u分支会关联，下次直接Ｐｕｓｈ 即可 )
git clone (链接)   //克隆远程仓库，变成一个本地仓库
git pull           //拉回本地仓库
git remote -v       //查看remote信息 

# 分支
git branch (分支)  //创建分支(git checkout -b 分支)创建并跳转到新分支
git branch         //查看分支
git chechout (分支)//切换分支
git branch -d ()   //删除分支
git merge          //合并分支
git push origin (分支)   //提交分支到远程  (在分支后面加上(:name)则创建name分支)
git push origin:(分支)   //删除远程分支
